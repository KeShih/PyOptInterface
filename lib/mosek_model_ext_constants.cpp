#include <nanobind/nanobind.h>
#include "solvers/mosek/mosek.h"

namespace nb = nanobind;

void bind_mosek_constants(nb::module_ &m)
{
	nb::module_ Enum = m.def_submodule("Enum");

	// must cast these enums to int, otherwise C++ compilation passes but we get bad cast when
	// import it in Python
#define BIND_C(x) Enum.attr(#x) = static_cast<int>(x)

	BIND_C(MSK_PRO_STA_UNKNOWN);
	BIND_C(MSK_PRO_STA_PRIM_AND_DUAL_FEAS);
	BIND_C(MSK_PRO_STA_PRIM_FEAS);
	BIND_C(MSK_PRO_STA_DUAL_FEAS);
	BIND_C(MSK_PRO_STA_PRIM_INFEAS);
	BIND_C(MSK_PRO_STA_DUAL_INFEAS);
	BIND_C(MSK_PRO_STA_PRIM_AND_DUAL_INFEAS);
	BIND_C(MSK_PRO_STA_ILL_POSED);
	BIND_C(MSK_PRO_STA_PRIM_INFEAS_OR_UNBOUNDED);

	BIND_C(MSK_SOL_STA_UNKNOWN);
	BIND_C(MSK_SOL_STA_OPTIMAL);
	BIND_C(MSK_SOL_STA_PRIM_FEAS);
	BIND_C(MSK_SOL_STA_DUAL_FEAS);
	BIND_C(MSK_SOL_STA_PRIM_AND_DUAL_FEAS);
	BIND_C(MSK_SOL_STA_PRIM_INFEAS_CER);
	BIND_C(MSK_SOL_STA_DUAL_INFEAS_CER);
	BIND_C(MSK_SOL_STA_PRIM_ILLPOSED_CER);
	BIND_C(MSK_SOL_STA_DUAL_ILLPOSED_CER);
	BIND_C(MSK_SOL_STA_INTEGER_OPTIMAL);

	BIND_C(MSK_RES_OK);
	BIND_C(MSK_RES_TRM_MAX_ITERATIONS);
	BIND_C(MSK_RES_TRM_MAX_TIME);
	BIND_C(MSK_RES_TRM_OBJECTIVE_RANGE);
	BIND_C(MSK_RES_TRM_STALL);
	BIND_C(MSK_RES_TRM_USER_CALLBACK);
	BIND_C(MSK_RES_TRM_MIO_NUM_RELAXS);
	BIND_C(MSK_RES_TRM_MIO_NUM_BRANCHES);
	BIND_C(MSK_RES_TRM_NUM_MAX_NUM_INT_SOLUTIONS);
	BIND_C(MSK_RES_TRM_MAX_NUM_SETBACKS);
	BIND_C(MSK_RES_TRM_NUMERICAL_PROBLEM);
	BIND_C(MSK_RES_TRM_LOST_RACE);
	BIND_C(MSK_RES_TRM_INTERNAL);
	BIND_C(MSK_RES_TRM_INTERNAL_STOP);
}