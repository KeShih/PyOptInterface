name: "Install optimizers on macOS"

inputs:
  GUROBI_WLS: 
    description: "..."
    required: true
  COPT_CLIENT_INI:
    description: "..."
    required: true
  MOSEK_LICENSE:
    description: "..."
    required: true
  GITHUB_TOKEN:
    description: "..."
    required: true
  CHECK_LICENSE: 
    description: "..."
    required: true
  ARCH:
    description: "..."
    required: true
    type: choice
    default: "X64"
    options:
      - "X64"
      - "ARM64"

runs:
  using: "composite"
  steps:
    - name: Create directory to store installers
      shell: bash
      run: |
        mkdir -p ~/installers
        mkdir -p ~/highs

    - name: Cache Installers
      id: cache-installers-macos
      uses: actions/cache@v4
      env:
        cache-name: cache-installers-macos
      with:
        path: ~/installers
        key: ${{ runner.os }}-${{ runner.arch }}-build-${{ env.cache-name }}-${{ hashFiles('optimizer_version.toml') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.arch }}-build-${{ env.cache-name }}-

    - if: ${{ steps.cache-installers-macos.outputs.cache-hit != 'true' }}
      shell: bash
      name: Download Universal Installers
      run: |
        curl -L -o ~/installers/gurobi.pkg https://packages.gurobi.com/11.0/gurobi11.0.0_macos_universal2.pkg
        curl -L -o ~/installers/copt.tar.gz https://pub.shanshu.ai/download/copt/7.1.0/osx64/CardinalOptimizer-7.1.0-universal_mac.tar.gz

    - if: ${{ steps.cache-installers-macos.outputs.cache-hit != 'true' }} && ${{ inputs.ARCH == 'X64' }}
      shell: bash
      name: Download X64 Installers
      run: |
        curl -L -o ~/installers/mosek.tar.bz2 https://download.mosek.com/stable/10.1.22/mosektoolsosx64x86.tar.bz2

    - if: ${{ steps.cache-installers-macos.outputs.cache-hit != 'true' }} && ${{ inputs.ARCH == 'ARM64' }}
      shell: bash
      name: Download ARM64 Installers
      run: |
        curl -L -o ~/installers/mosek.tar.bz2 https://download.mosek.com/stable/10.1.25/mosektoolsosxaarch64.tar.bz2

    - name: Setup Gurobi Installation
      shell: bash
      env:
        GUROBI_WLS: ${{ inputs.GUROBI_WLS }}
      run: |
        pkgutil --expand-full ~/installers/gurobi.pkg ~/gurobi
        ls -R ~/gurobi
        # set environment variables
        export GUROBI_HOME="${HOME}/gurobi/gurobi1100/macos_universal2"
        echo "GUROBI_HOME=${GUROBI_HOME}" >> $GITHUB_ENV
        echo "PATH=${PATH}:${GUROBI_HOME}/bin" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=${DYLD_LIBRARY_PATH}:${GUROBI_HOME}/lib" >> $GITHUB_ENV
        echo $GUROBI_HOME
        
        # setup license using secrets
        echo "$GUROBI_WLS" > ~/gurobi.lic
        echo "GRB_LICENSE_FILE=${HOME}/gurobi.lic" >> $GITHUB_ENV
    - name: Test Gurobi
      if: ${{ inputs.CHECK_LICENSE == 'true' }}
      shell: bash
      run: |
        gurobi_cl

    - name: Setup COPT Installation
      shell: bash
      env:
        COPT_CLIENT_INI: ${{ inputs.COPT_CLIENT_INI }}
      run: |
        tar xfz ~/installers/copt.tar.gz -C ~/
        ls ~/copt71
        # set environment variables
        export COPT_HOME="${HOME}/copt71"
        echo "COPT_HOME=${COPT_HOME}" >> $GITHUB_ENV
        echo "PATH=${PATH}:${COPT_HOME}/bin" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=${DYLD_LIBRARY_PATH}:${COPT_HOME}/lib" >> $GITHUB_ENV
        echo $COPT_HOME

        # setup license using secrets
        echo "$COPT_CLIENT_INI" > ~/client.ini
        echo "COPT_LICENSE_DIR=${HOME}" >> $GITHUB_ENV
    - name: Test COPT
      if: ${{ inputs.CHECK_LICENSE == 'true' }}
      shell: bash
      run: |
        copt_cmd -c "quit"

    - name: Setup MOSEK Installation
      shell: bash
      env:
        MOSEK_LICENSE: ${{ inputs.MOSEK_LICENSE }}
      run: |
        tar jxf ~/installers/mosek.tar.bz2 -C ~/
        ls ~/mosek
        # set environment variables
        export MOSEK_10_1_BINDIR="${HOME}/mosek/10.1/tools/platform/linux64x86/bin"
        echo "MOSEK_10_1_BINDIR=${MOSEK_10_1_BINDIR}" >> $GITHUB_ENV
        echo "PATH=${PATH}:${MOSEK_10_1_BINDIR}" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=${DYLD_LIBRARY_PATH}:${MOSEK_10_1_BINDIR}" >> $GITHUB_ENV
        echo $MOSEK_10_1_BINDIR

        # setup license using secrets
        echo "$MOSEK_LICENSE" > ~/mosek.lic
        echo "MOSEKLM_LICENSE_FILE=${HOME}/mosek.lic" >> $GITHUB_ENV
    - name: Test MOSEK
      if: ${{ inputs.CHECK_LICENSE == 'true' }}
      shell: bash
      run: |
        msktestlic

    - name: Download HiGHS artifact from my own build
      uses: dawidd6/action-download-artifact@v3
      with:
        # GitHub token, a Personal Access Token with `public_repo` scope
        github_token: ${{inputs.GITHUB_TOKEN}}
        workflow: build.yml
        repo: metab0t/highs_autobuild
        path: /home/runner/highs
        name: highs-artifact-macOS-${{ inputs.ARCH }}

    - name: Setup HiGHS Installation
      shell: bash
      run: |
        ls ~/highs
        chmod -R +xr ~/highs
        # set environment variables
        export HiGHS_HOME="${HOME}/highs"
        echo "HiGHS_HOME=${HiGHS_HOME}" >> $GITHUB_ENV
        echo "PATH=${PATH}:${HiGHS_HOME}/bin" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=${DYLD_LIBRARY_PATH}:${HiGHS_HOME}/lib" >> $GITHUB_ENV
        echo $HiGHS_HOME
    - name: Test HiGHS
      shell: bash
      run: |
        highs --version